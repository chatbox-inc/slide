extends ../layout.jade

block titles
    title Babelで触ってみようES6
    meta(name='description', content='PHPマイクロフレームワーク lumen')
    meta(name='author', content='mikakane')


block sections
    section
        :markdown
            # BabelでトライES6

            [関西フロントエンドUG 7月勉強会](http://kfug.connpass.com/event/16279/)
    section
        :markdown
            ## mikakane

            - 株式会社chatbox 代表
            - PHPer / フロントエンド

    section
        :markdown
            ECMAScript6
    section
        :markdown
            ## ECMAScript6

            - class
            - arrow関数
            - let/const
            - template string
    section
        :markdown
            俺の知ってるJSじゃない
    section
        :markdown
            JSerだと思ってたらJS読めなくなってた
    section(data-background="./porunarehu.gif")
    section
        :markdown
            敵を知って己を知れば…
    section
        :markdown
            レッツ トライ

            https://babeljs.io/docs/learn-es2015/
    section
        :markdown
            重要っぽいものだけ抜き出して
    section
        :markdown
            ## class

            ````
            class SkinnedMesh extends THREE.Mesh {
                constructor(geometry, materials) {
                    super(geometry, materials);
                    this.idMatrix = SkinnedMesh.defaultMatrix();
                    this.bones = [];
                    this.boneMatrices = [];
                    //...
                }
                update(camera) {
                    //...
                    super.update();
                }
                static defaultMatrix() {
                    return new THREE.Matrix4();
                }
            }
            ````
    section
        :markdown
            ## class

            - もうJSにはクラスはないとか言わない
            - extendできる。
            - constructor
            - 親はsuper
            - staticもあるでよ
    section
        :markdown
            ## let/const

            ````
            function f() {
              {
                let x;
                {
                  // okay, block scoped name
                  const x = "sneaky";
                  // error, const
                  x = "foo";
                }
                // error, already declared in block
                let x = "inner";
              }
            }
            ````

    section
        :markdown
            ## let/const

            - 変数の宣言、もうvarだけじゃない。
            - ブロックスコープ使える(let)。
            - 再代入禁止変数使える(const)。

    section
        :markdown
            ## arrow関数

            ````
            // Expression bodies
            var odds = evens.map(v => v + 1);
            var nums = evens.map((v, i) => v + i);
                        // Statement bodies
            nums.forEach(v => {
              if (v % 5 === 0)
                fives.push(v);
            });
                        // Lexical this
            var bob = {
              _name: "Bob",
              _friends: [],
              printFriends() {
                this._friends.forEach(f =>
                  console.log(this._name + " knows " + f));
              }
            }
            ````

    section
        :markdown
            ## arrow関数

            - `=>`でfunctionの代わりになる。
            - もうスペルミスで泣かない
            - でもthisが束縛される点には注意
            - 便利なときもあれば辛い時もある。
    section
        :markdown
            ## Module

            ````
            // lib/math.js
            export function sum(x, y) {
              return x + y;
            }
            export var pi = 3.141593;

            // app.js
            import * as math from "lib/math";
            alert("2π = " + math.sum(math.pi, math.pi));

            // otherApp.js
            import {sum, pi} from "lib/math";
            alert("2π = " + sum(pi, pi));
            ````

    section
        :markdown
            ## Module

            - ファイル分割しても安心
            - ファイル分割に関する記法にJS標準の形が与えられる。
            - importする側が受け皿を用意する形式
    section
        :markdown
            ## Template String
            文字列の変数埋め込みが楽に

            ````
            // Basic literal string creation
            `In ES5 "\n" is a line-feed.`
            // Multiline strings
            `In ES5 this is
                not legal.`
            // Interpolate variable bindings
            var name = "Bob", time = "today";
            `Hello ${name}, how are you ${time}?`
            // Construct an HTTP request prefix is used to interpret the replacements and construction
            GET`http://foo.org/bar?a=${a}&b=${b}
                Content-Type: application/json
                X-Credentials: ${credentials}
                { "foo": ${foo},
                  "bar": ${bar}}`(myOnReadyStateChangeHandler);
            ````
    section
        :markdown
            ## Promise
            標準で使えるようになったよ!!
            ````
            function timeout(duration = 0) {
                return new Promise((resolve, reject) => {
                    setTimeout(resolve, duration);
                })
            }
                        var p = timeout(1000).then(() => {
                return timeout(2000);
            }).then(() => {
                throw new Error("hmm");
            }).catch(err => {
                return Promise.all([timeout(100), timeout(200)]);
            })
            ````

    section
        :markdown
            で、これどうやって使うの？
    section
        :markdown
            各種ブラウザ等対応状況

            http://kangax.github.io/compat-table/es6/
    section
        :markdown
            『そのままだと』

            ブラウザでは動かせません!!
    section(data-background="./Babel.png")
    section
        :markdown
            ## Babel

            - ES6をES5(ブラウザでも動く子)に変換
            - コマンドラインでビルドっぽい感じの変換かけてくれる
            - ある種のAltJSみたいなものと思えば

            - コンパイルめんどくさいとか言わない。
            - Webサイト上でお試し可能!!
            https://babeljs.io/repl/

    section
        :markdown
            いろんな形でビルドできる。

            https://babeljs.io/docs/setup/
    section
        :markdown
            一つWebpackを使って、
            サンプルファイルを作りました。

            https://github.com/mikakane/es6Sample
    section
        :markdown
            ## まとめ
            - ES6が始まろうとしている。
            - クラスとかモジュールとかめっちゃ便利
            - ブラウザの対応状況はまだまだ微妙
            - Babelで時代を先取りできる。
            - せっかくだからビルドしようぜ!!
    section
        :markdown
            みなさまも是非お試しあれ



